/*
*
* {{properCase name }}
*
*/

{{#if memo}}
import React, { memo } from 'react';
{{else}}
import React from 'react';
{{/if}}
import ErrorBound from 'components/ErrorBound';
{{#if wantHeaders}}
import { Helmet } from 'react-helmet-async';
{{/if}}
{{#if wantMessages}}
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { FormattedMessage } from 'react-intl';
{{/if}}
{{#if wantActionsAndReducer}}
import { useSelector, useDispatch } from 'react-redux';
import { createStructuredSelector } from 'reselect';
{{/if}}

{{#if wantActionsAndReducer}}
{{#if wantSaga}}
import { useInjectReducer, useInjectSaga } from 'redux-injectors';
{{else}}
import { useInjectReducer } from 'redux-injectors';
{{/if}}
{{else}}
{{#if wantSaga}}
import { useInjectSaga } from 'redux-injectors';
{{/if}}
{{/if}}

{{#if wantActionsAndReducer}}
import makeSelect{{properCase name}} from './selectors';
import reducer from './reducer';
{{/if}}
{{#if wantSaga}}
import saga from './saga';
{{/if}}
{{#if wantMessages}}
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import messages from './messages';
{{/if}}

{{#if wantActionsAndReducer}}
const stateSelector = createStructuredSelector({
{{camelCase name}}: makeSelect{{properCase name}}(),
});
{{/if}}

interface Props {}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function {{ properCase name }}(props: Props) {
{{#if wantActionsAndReducer}}
useInjectReducer({ key: '{{ camelCase name }}', reducer: reducer });
{{/if}}
{{#if wantSaga}}
useInjectSaga({ key: '{{ camelCase name }}', saga: saga });
{{/if}}

{{#if wantActionsAndReducer}}
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const { {{camelCase name}} } = useSelector(stateSelector);
const dispatch = useDispatch(); // eslint-disable-line @typescript-eslint/no-unused-vars
{{/if}}
return (
<div>
  {{#if wantHeaders}}
  <Helmet>
    <title>{{properCase name}}</title>
    <meta name="description" content="Description of {{properCase name}}" />
  </Helmet>
  {{/if}}
  {{#if wantMessages}}
  <FormattedMessage {...messages.header} />
  {{/if}}
</div>
);
}

{{#if memo}}
export default memo((props: Props) => (
<ErrorBound>
  <{{ properCase name }} {...props} />
</ErrorBound>
));
{{else}}
export default (props: Props) => (
<ErrorBound>
  <{{ properCase name }} {...props} />
</ErrorBound>
);
{{/if}}